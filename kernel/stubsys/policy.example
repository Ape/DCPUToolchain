defaults
{
    kernel=@KERNEL_FOLDER@/stubsys.dkrn16
    symbols=@KERNEL_FOLDER@/stubsys.dsym16

    # some kernels will use jumplists...
    jumplist=@KERNEL_FOLDER@/stubsys.djmp16

    # others can use interrupts...
    #   the options for this setting are register-call
    #   or stack-call (see the assembly ABI and toolchain
    #   documentation).
    interrupt-call=register-call

    # interrupt call mappings
    interrupt-call(_stubapi_malloc)=0x4001
    interrupt-call(_stubapi_free)=0x4002
    interrupt-call(_stubapi_errno)=0x4003
    interrupt-call(_stubapi_exit)=0x4004
    interrupt-size(_stubapi_malloc)=1
    interrupt-size(_stubapi_free)=1
    interrupt-size(_stubapi_errno)=0
    interrupt-size(_stubapi_exit)=1
}

# image is the .executable format. for applications that will
# be loaded at runtime.  if this is not defined, the linker will
# use .image-direct. instead.
format(image):
    # offset all references to be relative to 0x1000
    offset 0x1000
    # call upon image-direct to perform the rest
    chain image-direct

# image-direct is the .executable format. for applications that
# are linked directly against the kernel.
format(image-direct):
    # write out the code (the linker has already
    # attached the kernel)
    write code

# internal format that writes the adjustment entries.
internal(write-adjustment):
    # write out adjustment table
    write total(adjustment)
    for $i from 0 to total(adjustment)
        write field(adjustment, $i, address)
    endfor

# internal format that writes the provided entries.
internal(write-provided):
    # write out provided table
    write total(provided)
    for $i from 0 to total(provided)
        write field(provided, $i, label_size)
        write field(provided, $i, label_text)
        write field(provided, $i, address)
    endfor

# shared is a custom format supported by this kernel
# in this case it.s a shared library, but we can make
# any definition here.
format(shared):
    # write out magic header
    write words(0x8A5F, 0x68FF)
    # write out tables
    chain write-adjustment
    chain write-provided
    # write out the code
    chain image-direct

# an example of defining a relocatable application
format(relocatable):
    # write out magic header
    write words(0x1234, 0x5678)
    # write out tables
    chain write-adjustment
    # write out the code
    chain image-direct

